apiVersion: v1
kind: ConfigMap
metadata:
  name: kanidmd-server-toml
  namespace: kanidm
data:
  server.toml: |
    #   The webserver bind address. Requires TLS certificates.
    #   If the port is set to 443 you may require the
    #   NET_BIND_SERVICE capability.
    #   Defaults to "127.0.0.1:8443"
    bindaddress = "[::]:8443"
    #
    #   The read-only ldap server bind address. Requires
    #   TLS certificates. If set to 636 you may require
    #   the NET_BIND_SERVICE capability.
    #   Defaults to "" (disabled)
    ldapbindaddress = "[::]:3636"
    #
    #   HTTPS requests can be reverse proxied by a loadbalancer.
    #   To preserve the original IP of the caller, these systems
    #   will often add a header such as "Forwarded" or
    #   "X-Forwarded-For". If set to true, then this header is
    #   respected as the "authoritative" source of the IP of the
    #   connected client. If you are not using a load balancer
    #   then you should leave this value as default.
    #   Defaults to false
    # trust_x_forward_for = false
    #
    #   The path to the kanidm database.
    db_path = "/data/kanidm.db"
    #
    #   If you have a known filesystem, kanidm can tune the
    #   database page size to match. Valid choices are:
    #   [zfs, other]
    #   If you are unsure about this leave it as the default
    #   (other). After changing this
    #   value you must run a vacuum task.
    #   - zfs:
    #     * sets database pagesize to 64k. You must set
    #       recordsize=64k on the zfs filesystem.
    #   - other:
    #     * sets database pagesize to 4k, matching most
    #       filesystems block sizes.
    # db_fs_type = "zfs"
    #
    #   The number of entries to store in the in-memory cache.
    #   Minimum value is 256. If unset
    #   an automatic heuristic is used to scale this.
    #   You should only adjust this value if you experience
    #   memory pressure on your system.
    # db_arc_size = 2048
    #
    #   TLS chain and key in pem format. Both must be present.
    #   If the server receives a SIGHUP, these files will be
    #   re-read and reloaded if their content is valid.
    tls_chain = "/data/chain.pem"
    tls_key = "/data/key.pem"
    #
    #   The log level of the server. May be one of info, debug, trace
    #
    #   NOTE: this can be overridden by the environment variable
    #   `KANIDM_LOG_LEVEL` at runtime
    #   Defaults to "info"
    # log_level = "info"
    #
    #   The DNS domain name of the server. This is used in a
    #   number of security-critical contexts
    #   such as webauthn, so it *must* match your DNS
    #   hostname. It is used to create
    #   security principal names such as `william@idm.example.com`
    #   so that in a (future) trust configuration it is possible
    #   to have unique Security Principal Names (spns) throughout
    #   the topology.
    #
    #   ⚠️  WARNING ⚠️
    #
    #   Changing this value WILL break many types of registered
    #   credentials for accounts including but not limited to
    #   webauthn, oauth tokens, and more.
    #   If you change this value you *must* run
    #   `kanidmd domain rename` immediately after.
    domain = "auth.myr-project.eu"
    #
    #   The origin for webauthn. This is the url to the server,
    #   with the port included if it is non-standard (any port
    #   except 443). This must match or be a descendent of the
    #   domain name you configure above. If these two items are
    #   not consistent, the server WILL refuse to start!
    #   origin = "https://idm.example.com"
    origin = "https://auth.myr-project.eu:8443"
    #
    [online_backup]
    #   The path to the output folder for online backups
    path = "/data/kanidm/backups/"
    #   The schedule to run online backups (see https://crontab.guru/)
    #   every day at 22:00 UTC (default)
    schedule = "00 22 * * *"
    #    four times a day at 3 minutes past the hour, every 6th hours
    # schedule = "03 */6 * * *"
    #   We also support non standard cron syntax, with the following format:
    #   sec  min   hour   day of month   month   day of week   year
    #   (it's very similar to the standard cron syntax, it just allows to specify the seconds
    #   at the beginning and the year at the end)
    #   Number of backups to keep (default 7)
    # versions = 7
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: kanidm
  namespace: kanidm
  labels:
    app.kubernetes.io/name: kanidm
    app.kubernetes.io/instance: kanidm-kanidm
  annotations:
automountServiceAccountToken: false
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kanidm-kanidm
  labels:
    app.kubernetes.io/name: kanidm
    app.kubernetes.io/instance: kanidm-kanidm
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingressclasses
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.io
    resources:
      - ingressroutes
      - ingressroutetcps
      - ingressrouteudps
      - middlewares
      - middlewaretcps
      - serverstransports
      - serverstransporttcps
      - tlsoptions
      - tlsstores
      - traefikservices
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kanidm-kanidm
  labels:
    app.kubernetes.io/name: kanidm
    app.kubernetes.io/instance: kanidm-kanidm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kanidm-kanidm
subjects:
  - kind: ServiceAccount
    name: kanidm
    namespace: kanidm
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kanidm-ingress
  namespace: kanidm
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    kubernetes.io/ingress.class: traefik
spec:
  ingressClassName: traefik
  rules:
    - host: auth.myr-project.eu
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: kanidmd
                port:
                  name: https
  tls:
    - secretName: kanidm-ingressroute-certificate
      hosts:
        - auth.myr-project.eu
---
apiVersion: v1
kind: Service
metadata:
  name: kanidmd
  namespace: kanidm
  annotations:
    traefik.ingress.kubernetes.io/service.serverstransport: "kanidm-auth.myr-project.eu@kubernetescrd"
    traefik.ingress.kubernetes.io/service.passhostheader: "true"
    traefik.ingress.kubernetes.io/service.serversscheme: "https"
spec:
  selector:
    app: kanidmd
  ports:
    - name: https
      port: 8443
      protocol: TCP
      targetPort: 8443
---
apiVersion: v1
kind: PersistentVolume
metadata:
  namespace: kanidm
  name: kanidmd-db
  labels:
    pv: kanidmd-db
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: "/var/lib/kanidm"
    type: DirectoryOrCreate
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: kanidm
  name: kanidmd-db
spec:
  selector:
    matchLabels:
      pv: kanidmd-db
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: kanidmd-db
  storageClassName: manual
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kanidmd
  namespace: kanidm
  labels:
    app: kanidmd
spec:
  selector:
    matchLabels:
      app: kanidmd
  template:
    metadata:
      labels:
        app: kanidmd
    spec:
      containers:
        - name: kanidmd
          image: kanidm/server:1.5.0
          env:
            - name: KANIDM_ADMIN_BIND_PATH
              value: "/var/run/kanidmd.sock"
            - name: KANIDM_BINDADDRESS
              value: "[::]:8443"
            - name: KANIDM_DOMAIN
              value: "auth.myr-project.eu"
            - name: KANIDM_ORIGIN
              value: "https://auth.myr-project.eu:31501"
            - name: KANIDM_LOG_LEVEL
              value: DEBUG
            - name: KANIDM_TLS_CHAIN
              value: /certs/tls.crt
            - name: KANIDM_TLS_KEY
              value: /certs/tls.key
            - name: RUST_LOG
              value: DEBUG
          livenessProbe:
            httpGet:
              path: /status
              port: https
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 5
          ports:
            - containerPort: 8443
              name: https
            - containerPort: 3636
              name: ldaps
          volumeMounts:
            - name: kanidmd-db
              mountPath: /data
              readOnly: false
            - name: kanidmd-server-toml
              mountPath: /data/server.toml
              subPath: server.toml
              readOnly: true
            - name: kanidmd-certs
              mountPath: /certs
              readOnly: true
            - name: socket-volume
              mountPath: /var/run
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              add:
                - NET_BIND_SERVICE
                - CHOWN
                - SETUID
                - SETGID
                - FOWNER
                - DAC_OVERRIDE
              drop:
                - ALL
          #resources:
          #limits:
          #cpu: "1"
          #memory: 1536Mi
          #requests:
          #cpu: "250m"
          #memory: 256Mi
      volumes:
        - name: kanidmd-db
          persistentVolumeClaim:
            claimName: kanidmd-db
        - name: kanidmd-certs
          secret:
            secretName: kanidm-ingressroute-certificate
        - name: kanidmd-server-toml
          configMap:
            name: kanidmd-server-toml
        - name: socket-volume
          emptyDir: {}
