apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: pg-ingressroute-certificate
  namespace: cert-manager
spec:
  # Secret names are always required.
  secretName: pg-ingressroute-certificate

  issuerRef:
    name: digitalocean-clusterissuer
    kind: ClusterIssuer

  dnsNames:
    - pg.myr-project.eu

  secretTemplate:
    annotations:
      reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
      reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "database"
      reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
      reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "database"
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: pg-read-ingressroute-certificate
  namespace: cert-manager
spec:
  # Secret names are always required.
  secretName: pg-read-ingressroute-certificate

  issuerRef:
    name: digitalocean-clusterissuer
    kind: ClusterIssuer

  dnsNames:
    - pg-read.myr-project.eu

  secretTemplate:
    annotations:
      reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
      reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "database"
      reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
      reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "database"
---
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: ingress-route-cluster-rw
  namespace: database
spec:
  entryPoints:
    - websecure
  routes:
    - match: HostSNI(`pg.myr-project.eu`)
      services:
        - name: cluster-rw
          port: 5432
  tls:
    secretName: pg-ingressroute-certificate
---
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: ingress-route-cluster-ro
  namespace: database
spec:
  entryPoints:
    - websecure
  routes:
    - match: HostSNI(`pg-read.myr-project.eu`)
      services:
        - name: cluster-r
          port: 5432
  tls:
    secretName: pg-ingressroute-certificate
