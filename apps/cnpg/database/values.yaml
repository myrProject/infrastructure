database:
  recovery:
    ##
    # -- Available recovery methods:
    # * `backup` - Recovers a CNPG cluster from a CNPG backup (PITR supported) Needs to be on the same cluster in the same namespace.
    # * `object_store` - Recovers a CNPG cluster from a barman object store (PITR supported).
    # * `pg_basebackup` - Recovers a CNPG cluster viaa streaming replication protocol. Useful if you want to
    #        migrate databases to CloudNativePG, even from outside Kubernetes.
    # * `import` - Import one or more databases from an existing Postgres cluster.
    method: backup

    ## -- Point in time recovery target. Specify one of the following:
    pitrTarget:
      # -- Time in RFC3339 format
      time: ""

    ##
    # -- Backup Recovery Method
    backupName: "" # Name of the backup to recover from. Required if method is `backup`.

    ##
    # -- The original cluster name when used in backups. Also known as serverName.
    clusterName: ""
    # -- Overrides the provider specific default endpoint. Defaults to:
    # S3: https://s3.<region>.amazonaws.com"
    # Leave empty if using the default S3 endpoint
    endpointURL: ""
    # -- Specifies a CA bundle to validate a privately signed certificate.
    endpointCA:
      # -- Creates a secret with the given value if true, otherwise uses an existing secret.
      create: false
      name: ""
      key: ""
      value: ""
    # -- Overrides the provider specific default path. Defaults to:
    # S3: s3://<bucket><path>
    # Azure: https://<storageAccount>.<serviceName>.core.windows.net/<containerName><path>
    # Google: gs://<bucket><path>
    destinationPath: ""
    # -- One of `s3`, `azure` or `google`
    provider: s3
    s3:
      region: ""
      bucket: ""
      path: "/"
      accessKey: ""
      secretKey: ""
      # -- Use the role based authentication without providing explicitly the keys
      inheritFromIAMRole: false
    azure:
      path: "/"
      connectionString: ""
      storageAccount: ""
      storageKey: ""
      storageSasToken: ""
      containerName: ""
      serviceName: blob
      inheritFromAzureAD: false
    google:
      path: "/"
      bucket: ""
      gkeEnvironment: false
      applicationCredentials: ""
    secret:
      # -- Whether to create a secret for the backup credentials
      create: true
      # -- Name of the backup credentials secret
      name: ""

    # See https://cloudnative-pg.io/documentation/1.22/bootstrap/#bootstrap-from-a-live-cluster-pg_basebackup
    pgBaseBackup:
      # -- Name of the database used by the application. Default: `app`.
      database: app
      # -- Name of the owner of the database in the instance to be used by applications. Defaults to the value of the `database` key.
      secret: ""
      # -- Name of the secret containing the initial credentials for the owner of the user database. If empty a new secret will be created from scratch
      owner: ""
      source:
        host: ""
        port: 5432
        username: ""
        database: "app"
        sslMode: "verify-full"
        passwordSecret:
          # -- Whether to create a secret for the password
          create: false
          # -- Name of the secret containing the password
          name: ""
          # -- The key in the secret containing the password
          key: "password"
          # -- The password value to use when creating the secret
          value: ""
        sslKeySecret:
          name: ""
          key: ""
        sslCertSecret:
          name: ""
          key: ""
        sslRootCertSecret:
          name: ""
          key: ""
